#+TITLE: SELECT ROUND-UP
#+STARTUP: overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* README

  This notebook contains a round-up of the entire SELECT command
  pipeline in SQL. The code blocks run with SQLite, and we use a
  simple database of three different tables to explore SELECT.

  To run this notebook, which resides in GitHub and GDrive (in the
  /practice directory), you need to have SQLite installed and in the
  PATH so that Emacs can find it, and you need to have the ~/.emacs~
  file also available from GDrive, installed in Emacs' HOME directory.

* Download

  * This includes the SQLite file ~xyz.sql~ and a directory with image
    files.

* Preliminaries

  * For the presentation, I'm going to use the XMind-map from GitHub.

    #+caption: SELECT round-up
    #+attr_html: :width 600px
    [[./img/select1.png]]

  * [ ] How are the commands in the mindmap ordered (from right to
    left)?

    #+begin_quote
    Answer:
    #+end_quote

* Create some tables

  * [ ] Let's load some tables to play with. The file ~xyz.sql~ is
    available from [[https://drive.google.com/drive/folders/1_7g2QHnAEc_4pQki6r-KRJYGcl_mdq3Y?usp=sharing][GDrive's notebook directory]]. It contains a
    complete database dump. We load it with the SQLite command
    ~.read~, then check database and tables. There should be three,
    named ~x~, ~y~, and ~z~.

    #+name: read tables
    #+begin_src sqlite :db xyz.db :header :column :exports both :results output



    #+end_src

  * [ ] Challenge: if the tables already exist in ~xyz.db~ (and you
    don't have the ~IF NOT EXISTS~ clause in the ~CREATE TABLE~
    statement), you need to delete the database before loading the
    tables. But even if you do that, the ~INSERT~ commands will add to
    the existing tables. So how can you limit the import or delete
    duplicate entries?

    #+begin_quote
    ANSWER:
    #+end_quote

  * We use ~SELECT~ with the wildcard ~*~ for the column selection,
    and without conditions (i.e. conditions on row selections) to look
    at each table.

  * [ ] Print table ~x~ - one integer column and one column of strings.

    #+name: select from x
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  * [ ] Print table ~y~ - one integer column and one column of floats.

    #+name: select from y
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  * [ ] Print table ~z~ - two integer columns

    #+name: select from z
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  #+caption: Sample tables x,y,z
  #+attr_html: :width 800px
  [[./img/xyz.png]]

* Simple JOINs

  * [ ] CROSS JOIN: Since both tables had 3 rows and 2 colums, the result
    set has 9=3*3 rows and 4=2*2 columns.

    #+name: join1
    #+begin_src sqlite :db xyz.db :header :column :exports both
      SELECT * FROM x JOIN y;
    #+end_src

    #+name: join2
    #+begin_src sqlite :db xyz.db :header :column :exports both
      SELECT * FROM x CROSS JOIN y;
    #+end_src

    #+name: join3
    #+begin_src sqlite :db xyz.db :header :column :exports both
      SELECT * FROM x,y;
    #+end_src

* JOIN ... ON

  * [ ] INNER JOIN: Remember the zipper principle - identify 2 columns to
    zip together. This identification a = c follows after the ~ON~ keyword.

    #+name: join4
    #+begin_src sqlite :db xyz.db :header :column :exports both
      SELECT * FROM x JOIN y ON a = c;
    #+end_src

    - Compare with the CROSS JOIN before. This time, Only those
      columns that satisfy the condition ~a=c~ are included in [[join4]]

  * [ ] What if we want to ~JOIN~ tables ~x~ and ~z~? They both have a
    column named ~a~. We now need to qualify the selection with ~.~

    #+name: join5
    #+begin_src sqlite :db xyz.db :header :column :exports both
      SELECT * FROM x JOIN z ON x.a = z.a;
    #+end_src


  * [ ] You can resolve column name confusions (same column name in
    different tables) by using aliases. Run the previous command [[join5]]
    again, but alias ~x~ as ~t_x~ and ~z~ as ~t_z~.

    #+name: join7
    #+begin_src sqlite :db xyz.db :header :column :nullvalue [NULL]
      SELECT * FROM x AS t_x JOIN z AS t_z ON t_x.a = t_z.a;
    #+end_src


  * [ ] There are five (!) more ~JOIN~ commands:
    - ~LEFT OUTER JOIN~ will also include not matched items
    - ~COMPOUND JOIN~ joins multiple tables

    Here is an example for you to run and understand:

    #+name: join6
    #+begin_src sqlite :db xyz.db :header :column :nullvalue [NULL]
      SELECT * FROM x JOIN y ON x.a=y.c LEFT OUTER JOIN z ON y.c=z.a;
    #+end_src

    * Work through this example until you reall understand what this
      multiple join = INNER JOIN + LEFT JOIN does!

* WHERE examples

  * [ ] Print a row: the value ~Alice~ for the attribute ~x.b~.

    #+name: row
    #+begin_src sqlite :db xyz.db :header :column

    #+end_src

  * [ ] Print a range of values of table y - for 1.0 < d < 3.0.

    #+name: between
    #+begin_src sqlite :db xyz.db :header :column

    #+end_src


  * [ ] Print columns y.c, y.d and a column for the sum of y.c+y.d
    (call it PLUS) with the condition that the sum is smaller than 4.

    #+name: sum
    #+begin_src sqlite :db xyz.db :header :column

    #+end_src


  * [ ] The next block [[sum1]] uses foods.db to select a range of values
    with wildcards. Here, * instead of % would also work (try
    it). Notice that [[sum1]] uses the header argument ~:db foods.db~.

    #+name: sum1
    #+begin_src sqlite :db foods.db

    #+end_src

* GROUP BY Examples
  * [ ] Group table z by the column z.a. Can you guess how many rows
    are going to be printed?

    #+name: groupBy
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  * [ ] Print the number of rows next to every value of z.a. Call this
    new column 'count'.

    #+name: groupBy1
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  * [X] Run [[groupBy]] again (group by z.a) but now also print out the
    sum of all the z.e values in each group. Call the new column
    'TOTAL'.

    #+name: groupBy2
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src


  * [ ] Run [[groupBy]] again (group by z.a) but now also compute
    - the sum(e) as SUM
    - the count(e) as TOTAL
    - the average as AGG computed with sum and count
    - the average as AVG computed with the aggregate function

    #+name: groupBy3
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src

    * [ ] A HAVING clause can be used to filter rows based off the
      results of the sum() aggregation. Run the block [[having1]].

      #+name: having1
      #+begin_src sqlite :db xyz.db :header :column :exports both
        SELECT a, sum(e) AS TOTAL
        FROM z
        GROUP BY z.a
        HAVING total > 500;
      #+end_src

  * [ ] An example with the foods database, and the table ~foods~;
    print the food ~type_ID~ and the total number of food types per
    food type group, and print those IDs whose group has less than 20
    foods in it.

    #+name: having 2
    #+begin_src sqlite :db foods.db :header :column :exports both



    #+end_src


* ORDER BY examples

  * [ ] Order table y by the numbers in y.d, and print all columns.

    #+name: orderBy
    #+begin_src sqlite :db xyz.db :header :column :exports both

    #+end_src

  * [ ] An example from the foods database. Display all columns from
    the table ~foods~, and filter those rows whose ~name~ begins with
    a ~B~. Print only 10 lines.

    #+name: orderBy2
    #+begin_src sqlite :db foods.db :header :column :export both :results output

    #+end_src


  * [ ] Now take the command from [[orderBy2]] and order by food type ID
    in descending order. To do this, put ~DESC~ after the column name.

    #+name: orderBy3
    #+begin_src sqlite :db foods.db :header :column :export both :results output



    #+end_src


  * [ ] You can order by any number of columns. Modify the command in
    [[orderBy3]]: order in descending order on ~type_id~, and then order the
    result in ascending order alphabetically on ~name~.

    #+name: orderBy4
    #+begin_src sqlite :db foods.db :header :column :export both :results output

    #+end_src

* LIMIT and OFFSET examples

  * [ ] From foods, print the first 5 lines of all columns.

    #+name: limit1
    #+begin_src sqlite :db foods.db :header :column :exports both :results output

    #+end_src


  * [ ] Change the code in [[limit1]] only to skip the first 2 lines.

    #+name: limit2
    #+begin_src sqlite :db foods.db :header :column :exports both :results output

    #+end_src


  * [ ] Skip the first 2 lines without using the keyword ~OFFSET~.

    #+name: limit3
    #+begin_src sqlite :db foods.db :header :column :exports both :results output

    #+end_src

