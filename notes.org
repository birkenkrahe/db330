#+TITLE:Followup notes
#+AUTHOR:Marcus Birkenkrahe
#+SUBTITLE:Followup for CSC330 Database Theory & Applications Spring 2022
#+STARTUP:overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* What is this?

  Instead of bugging you with emails, I opt to summarize my course
  observations regarding content, process, in this file. These often
  contain additional links, articles, and musings.

  I usually update it after each class - it also contains the homework
  (if any). The first point of call for any questions should be the
  FAQ. There are two FAQs - a [[https://github.com/birkenkrahe/org/blob/master/FAQ.org#frequently-asked-questions][general one]] (for all my courses), and a
  [[https://github.com/birkenkrahe/db330/blob/main/FAQ.org][FAQ for CSC 330]].

* 1.1 (01/11/22)

** Homework (by Thursday 13-Jan)

   * Register with GitHub (2 min)
   * Complete the GitHub Hello World exercise (20 min)
   * +Give me your GitHub user name (email - with course ID - or
     Thursday in class) - so that I can add you to the repo+ - no
     need, course is public now
   * Submit an issue to the course repo confirming that you completed
     the exercise.

   Note: if you already did this as part of another course, you don't
   have to do it again but you need to let me know in your email,
   which of my courses you attend so that I can add you to one or more
   GitHub repos.

** Stuff

   * [[https://github.com/birkenkrahe/db330/blob/main/agenda.org][Agenda]] - we covered all of it (and more) - agenda is available in
     GitHub only.

   * Books: "Crafting Interpreters" by Nystrom (2021) is a fun book on
     creating a small interpreted programming language. This would be
     an extra cool (Honors) project in a course on programming
     languages!

     #+attr_html: :width 600px
     [[./img/nystrom.png]]

   * Pyret (thank you, Molly!) - [[https://www.pyret.org/index.html][check it out]].

   * Showed GitHub, DataCamp teams and assignments, and GNU Emacs. We
     talked about structured vs. unstructured data, and Torvald's Git
     version control program: which follows a key-value data model -
     all data (committed differences) are stored in tree-like
     structures and indexed by hash codes. [[https://medium.com/hackernoon/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5][See here for more]] (Spajic,
     2018).

     #+attr_html: :width 600px
     #+caption: GitHub desktop application
     [[./img/gh1.png]]

   * The DataCamp platform supports the three most important data
     science languages (in order of importance in the real world):
     SQL, R, Python. You can do data science with the shell (bash), or
     even with Java, C, or any other language of course. The season's
     last assignment is a project where you can see all that you
     learnt about SQL at work: an anlysis of international debt
     statistics. You do not need to work on the assignments in any
     particular order - as long as you don't miss the weekly
     deadlines. A weekly assignment should take 20-30 minutes of your
     time.

     #+attr_html: :width 600px
     #+caption: DataCamp project - Analyze Intern. Debt Stats
     [[./img/project.png]]

   * Recorded a screencast for the missing 10 minutes at the end
     (network outage in Batesville!) - [[https://youtu.be/8HJGz3IYoHI][see on YouTube here]]
     (Birkenkrahe, 2022). This is a demonstration of the differences
     of interactive shell scripting vs. interactive notebooks, using
     SQLite as a sample language. You will get an assignment to create
     a literate programming file next week. Don't be put off by the
     level of detail of this demo - let it all just wash over you for
     now - you'll learn this and much more in this course!

     #+attr_html: :width 600px
     [[./img/demo.png]]

     In the screencast I talk about missing syntax highlighting in the
     shell buffer on the left: "I could add it if I wanted to." This
     is true - everything is Emacs is customizable, and I spent years,
     literally, doing this. [[https://wikemacs.org/wiki/Shell][Here is the documentation]] specifically on
     customizing the shell, if you're curious. The language to do this
     is Emacs-Lisp, a Lisp dialect. I mentioned that Lisp was the
     [[https://medium.com/ai-society/the-lisp-approach-to-ai-part-1-a48c7385a913][first and, for a long time, dominant AI language]] (Valencia,
     2017). It's a great language to learn, and GNU Emacs is the
     ticket if you feel like it.

     #+attr_html: :width 600px
     #+caption: Common Lisp code to create an n-inputs m-units one layer perceptron. Source: AIMA.
     [[./img/lisp.png]]

* 1.2 (01/13/22)
** DataCamp membership

   * DataCamp: You should all be in your courses now.
     - Your assignments are on one page but you'll be notified via
       schoology as soon as an assignment is due

   #+attr_html: :width 400px
   #+caption: DataCamp DB course member list
   [[./img/members.png]]
   
** History of databases

   * [[https://youtu.be/KG-mqHoXOXY][YouTube video link]]

     #+attr_html: :width 400px
     #+caption: Which of these founders has nothing to do with databases?
     [[./img/founders.png]]

   * DB are an old human interest (information is always gathered)

   * DB development happened in close "combat" with companies and
     operating systems (market and a hardware aspect to it)

   * Dominant language is SQL - in connection with relational DB

   * Codd's 12 rules = everything you need to know about relational
     DB design (these rules scale extremely well)

   * There are MANY different types of DBMS

   * We'll be installing SQLite, too, for local SQL experimentation

** DBMS IoT example application (MooCall)

   * Website for this [[https://www.moocall.com/#][Irish app]]

     #+attr_html: :width 400px
     #+caption: Two cows with MooCall sensors attached.
     [[./img/moocall.jpg]]

   * Sensor applications are small and look trivial, but they're
     highly security relevant (Cernobyl disaster in USSR, 1986). See
     [[https://www.basicbooks.com/titles/dietrich-dorner/the-logic-of-failure/9780201479485/][The Logic of Failure (Dorner, 1997)]].

     #+attr_html: :width 300px
     [[./img/dorner.jpg]]

   * Big Data ("starts" modern data science) = 3Vs = Volume +
     Velocity + Variety [5V definitions add "value", "veracity"]

   * IoT = "webservice"-enabled, cloud-networked, fast, big data
     applications

   * MooCall DB networking:
     1) cow data are generated and pre-processed locally (e.g. cow ID,
        temperature, motion etc.) = "[[https://en.wikipedia.org/wiki/Edge_computing][edge computing]]" example
     2) cow data are processed globally (in the cloud) to generate
        user signal ("this cow's calving!")
     3) Signal is transmitted to the user = farmer for potential
        action.

   * DB system = DBMS + DB - the DBMS has a lot of fancy stuff on
     board: performance optimizer, shell, API

   * BC (Before Codd) = file system-based data management, and AC (After
     Codd) = DB management system (DBMS)-based data management.

** GNU Emacs installation

   * Install vanilla[fn:1] GNU Emacs or a modified Emacs (for statistics
     processing with R and other packages - [[https://ess.r-project.org/][ESS]])

   * Vanilla GNU Emacs v27 Windows installation: you need the
     ~emacs-27.1-x86_64-installer.exe~ [[http://gnu.freemirror.org/gnu/emacs/windows/emacs-27/][from this page]].

   * MacOS: get the [[https://vigou3.gitlab.io/emacs-modified-macos/][modified version]] if you like (easiest), or the
     binary using the command line terminal as shown [[https://www.gnu.org/software/emacs/download.html][here]], using the
     ~Homebrew~ package manager.

     #+attr_html: :width 300px
     #+caption:GNU Emacs v27 download online repo
     [[./img/download.png]]

   * Demo: keyboard macros. I showed how to define a keyboard macro
     (~C-x (~ [key sequence] ~C-x )~) and how to apply it repeatedly
     (~C-u [times] C-x e~). [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Keyboard-Macros.html][Here's the documentation]]. 
   
* 2.1 (01/18/22)

** Quiz 1

   THE QUIZ IS ON ... SCHOOLOGY 1 PM - 1.15 PM

*** Feedback/discussion

    FOLLOWED by brief FEEDBACK:

   * We'll do one of these per week (I hope)
   * Any content questions?
   * Too much time? Too little?
   * Questions too hard? Too easy?
   * A subset of these questions will become the final exam
   * After playing the quiz in class you can play it unlimited times
   * Quizzes are now *ungraded* (final exam is now 30% of final grade)
  
** Review: file vs database approach

   #+attr_html: :width 600px
   #+caption: database dictionary example (tutorialcup.com)
   [[./img/dict.png]]

* Captain's Log[fn:2]

   #+attr_html: :width 800px
   #+caption: Entity Relationship Diagram (Source: Lucidchart).
   [[./img/erd.png]]

   * strong vs. soft/loose coupling is an important design issue (it
     relates directly to the resilience of the designed system).

   * *meta data* are data about data, used to control, manage other
     data, and processes

   * SQL (Structured Query Language): dominant language for
     structured, table-based (aka relational) databases
     - DQL = Data Query Language (e.g. selecting data)
     - DDL = Data Definition Language (e.g. creating tables)
     - DML = Data Manipulation Language (e.g. input/output of data)
     - DCL = Data Control Language (to alter meta data, e.g. rights)

   * Learning anything is best as a "variation on a theme" (as in
     music)

   * MooCall: what do we want to store (cow temperature F, in C)

   * State-based view of computing (von Neumann architecture) =
     dominant paradigm (automata, Turing machines...)
   
* NEXT GNU Emacs tour

  * Ctrl-h Ctrl-a RET : Startup screen
  * Emacs written in C and Lisp (Emacs Lisp)
  * Emacs is an IDE - we'll use it for SQL, SQLite, and bash
  * Emacs contains a bunch of apps (e.g. file explorer)
  * Try the Emacs onboard tutorial (CTRL-h t)

* Glossary = the learning dictionary for your brain

  * Why is it important to have a glossary?
  
  | TERM      | MEANING                                                  |
  |-----------+----------------------------------------------------------|
  | Meta data | Data about data, e.g. control information for a database |
  
* References

  Birkenkrahe (Jan 11, 2022). Interactive shell vs. interactive
  notebook (literate programming demo). [[https://youtu.be/8HJGz3IYoHI][URL: youtu.be/8HJGz3IYoHI]].

  bnewall1 (Apr 25, 2010). Star Trek: Captain's Log - 11/30/1994 - 2/7
  [video]. [[https://youtu.be/T2bSMLEQX1o][URL: youtu.be/T2bSMLEQX1o]].

  Lucidchart (2022). What is a Database Model [website]. [[https://www.lucidchart.com/pages/database-diagram/database-models][URL:
  www.lucidchart.com]].
  
  Moocall (Nov 27, 2020). Moocall Calving Sensor [video]. [[https://youtu.be/718uGYbUmao][URL:
  youtu.be/718uGYbUmao]].

  Nystrom (2021). Crafting Interpreters. Genever Benning. URL:
  https://craftinginterpreters.com/

  Russell/Norvig (2021). Artificial Intelligence - a Modern Approach
  (AIMA). Pearson. URL:

  Spajic (Jan 29, 2018). Understanding Git - Data Model. [[https://medium.com/hackernoon/https-medium-com-zspajich-understanding-git-data-model-95eb16cc99f5][URL:
  medium.com/hackernoon]].
  
  Valencia (Feb 28, 2017). The Lisp approach to AI (Part 1). [[https://medium.com/ai-society/the-lisp-approach-to-ai-part-1-a48c7385a913][URL:
  medium.com/ai-society.]]

* Footnotes

[fn:2][[https://youtu.be/T2bSMLEQX1o]["Logic, logic...I'm sick to death of logic!"]] (Star Trek:
Captain's Log)

[fn:1]The term "vanilla" refers to the fact that this is the
uncustomized, original version of Emacs. For large, old open source
projects, this is a bit of a mystery, though, since so many versions
exist that it may be difficult to identify "the original".
