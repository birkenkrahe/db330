#+TITLE: DB Agenda
#+AUTHOR: Marcus Birkenkrahe
#+SUBTITLE: Agenda DB330 Database Theory and Applications
#+STARTUP: overview hideblocks
#+OPTIONS: toc:nil num:nil ^:nil
* README

  This file contains the agenda overview (what I had planned), the
  objectives (what we managed to do) and (much of the) content of each
  taught session of the course. I want to avoid splitting the content
  up over many files - so that you have to navigate as little as
  possible (like a book)!

  The companion file to this file, less structured and with the
  captain's log, is the [[file:notes.org][notes.org]] file.

* Intro and GitHub - w1s1 - January 11, 2022

  #+attr_html: :width 500px
  [[./img/fivearmies.jpg]]

  * Aspiration and ambition (Lyon Data Science program)
  * Introduction to the course & the lecturer
  * Homework assignments: *GitHub*, DataCamp, Emacs
  * What's next?

** My new didactic credo
   #+attr_html: :width 600px
   [[./img/credo.png]]

** Aspirations and ambitions (DS program 2021-2023)

   | CLASS                                 | CODE            | TERM        | Topics                              |
   |---------------------------------------+-----------------+-------------+-------------------------------------|
   | Data Science Tools and Methods        | DSC 101         | Fall 2021   | R, Basic EDA, Base R                |
   | Introduction to Advanced Data Science | DSC 205         | Spring 2022 | R, Advanced EDA, Tidyverse          |
   | Database Theory and Applications      | CSC 330         | Spring 2022 | SQL, SQLite                         |
   | Operating Systems                     | CSC 420         | Spring 2022 | Bash, awk, sed, regular expressions |
   | Applied Math for Data Science         | DSC 482/MTH 360 | Fall 2022   | Probability, Statistics + R         |
   | Data Visualization                    | DSC 302         | Fall 2022   | D3, Processing, Javascript, Bokeh   |
   | Machine Learning                      | DSC 305         | Spring 2023 | Predictive algorithms, neural nets  |
   | Digital Humanities                    | CSC 105         | Spring 2023 | Data science applications           |

** Introduction to the course & the lecturer

   #+attr_html: :width 400px
   [[./img/mb.jpg]]

   * PhD theoretical particle physics / WWW development

   * SQL since 2005 (Why? Particle data = unstructured)

   * Professor, [[https://en.wikipedia.org/wiki/Business_informatics#:~:text=Business%20informatics%20(BI)%20is%20a,and%20concepts%20of%20computer%20science.&text=The%20focus%20on%20programming%20and,of%20economics%20and%20information%20technology.][Business Informatics]] @Berlin Univ

   * Visiting Assoc Prof for Data Science @Lyon (2021-23)

   * Syllabus for this course ([[https://lyon.schoology.com/course/5516220926/materials][Schoology]])

** Homework assignments week 1 (11-Jan/13-Jan-2022)

   #+attr_html: :width 600px
   [[./img/homework.png]]

   * *GitHub Hello World Exercise ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][Info: FAQ]]) - by Thursday 13-Jan!*
   * DataCamp platform registration ([[https://lyon.schoology.com/course/5516220833/materials][Link: Schoology]])
   * GNU Emacs installation ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-emacs-ess-under-windows-and-macos][Info: FAQ]])

*** GitHub
**** What is it?

     * Software development platform (like GitLab, BitBucket,
       SourceForge, etc.)
     * Built around Git by Linus Torvalds
     * Bought by Microsoft in 2018 (like OpenAI - home of GPT3)
     * 77 mio users (developers) + 200+ mio software projects
     * AI support (e.g. [[https://copilot.github.com/][GitHub Copilot]])

     Watch: "[[https://youtu.be/w3jLJU7DT5E][What is GitHub?]]" (GitHub, 2016)

     #+attr_html: :width 500px
     [[./img/github.gif]]
     /Gif: "So long binder of requirements" Source: GitHub/

**** Why are we using it?

     /Image: Org-mode file in GitHub/
     #+attr_html: :width 500px
     [[./img/org.png]]

     * It's free
     * To host course materials
     * Upload assignments (esp. Emacs Org-files)
     * Discussion
     * Wiki for collaboration
     * Complements Schoology

**** What will you have to do?

     * [[https://github.com][Sign up with GitHub]] - use Lyon Email
     * Pick an available username *using your own first and last name*,
       e.g. ~MarcusBirkenkrahe~, or ~DonaldTrump~
     * [[https://docs.github.com/en/get-started/quickstart/hello-world][Complete the "Hello World" exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.md#completing-the-github-hello-world-exercise][FAQ]])
     * Give me your GitHub username so that I can add you as a
       collaborator to my private ~db330~ repository
     * [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][Create an issue]] from the [[https://github.com/birkenkrahe/cc100/issues][~db330~ repository]] like in the example
       below (except from your account instead of mine).
     -----
     /Image: Issue "Assignment completed"/
     #+attr_html: :width 500px
     [[./img/issue.png]]
     -----
     #+begin_quote
     If you do have a GitHub account already, do the exercise anyway
     using your existing account (it takes 10 min)! Make sure you
     let me know what your user name is so that I can add you to my
     repo.
     #+end_quote

**** What else can you do?

     * You can [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][fork]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~db330~]] repository
     * You can [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/managing-subscriptions-for-activity-on-github/viewing-your-subscriptions][watch]] the [[https://docs.github.com/en/get-started/quickstart/fork-a-repo][~db330~]] repository - and set [[https://docs.github.com/en/account-and-profile/managing-subscriptions-and-notifications-on-github/setting-up-notifications/configuring-notifications][~Notifications~]] to
       ~Participating and @mentions~ so that you see my comments (see
       image below).

     #+attr_html: :width 300px
     [[./img/watch.png]]
     /Image: Notifications settings when watching a repository/

     * You can [[https://docs.github.com/en/issues/tracking-your-work-with-issues/creating-an-issue#creating-an-issue-from-a-repository][submit issues]] from the repository (e.g. if you notice
       mistakes or if you want extra information, or to share a link)
     * You can participate in [[https://github.com/birkenkrahe/cc100/discussions][discussions]] (sometimes I will make you)
     * You can add to the [[https://github.com/birkenkrahe/cc100/wiki][wiki]] (e.g. comments and links to interesting
       resources)
     * You can install the [[https://github.com/mobile][mobile app]] on your smartphone
     * You can use it as a platform for [[https://docs.github.com/en/issues/trying-out-the-new-projects-experience/about-projects][projects]] or [[https://github.com/features/codespaces][coding]]
     * You can download the [[https://desktop.github.com/][desktop client]] to manage repos on your PC
       (see image below).

     /Image: GitHub desktop client commit/
     #+attr_html: :width 800px
     [[./img/gh.png]]

*** DataCamp

    #+attr_html: :width 400px
    [[./img/datacamp.png]]

    * Why are we using it?
    * How are we using it?
    * What will you have to do?

*** GNU Emacs (1976...1985)

    #+attr_html: :width 400px
    [[./img/emacs.png]]

    * Why are we using it?
      - To mix documentation + code + output = literate programming
        (1984)
      - It's the same thing as an interactive computing notebook
        (Jupyter) ... except open to ALL languages and outputs
    * How are we using it?
    * What will you have to do?

** What's next?

   * See schedule ([[https://github.com/birkenkrahe/os420/blob/main/schedule.org][GitHub]])
   * Watch online lecture on "Systems"
   * Everything else = online summary
   * See you (hopefully) Thursday in class! (Lyon 104)

   #+caption: Victor N. installs Emacs @10:50 AM
   #+attr_html: :width 600px
   [[./img/victor.png]]

* DataCamp, History of DB, MooCall - w1s2 - January 13 , 2022
** Overview

   | HOW         | WHAT                                     |
   |-------------+------------------------------------------|
   | Review      | [[file:~/Documents/GitHub/org/FAQ.org][GitHub Hello World exercise]] ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#completing-the-github-hello-world-exercise][FAQ]])        |
   | Video       | [[https://youtu.be/KG-mqHoXOXY][History of Databases]] (Codd, Oracle, IBM) |
   | Lecture     | [[https://lyon.schoology.com/link?a=&path=https%3A%2F%2Fwww.pdbmbook.com%2Flecturers%2Fslides%2Faccess][DB applications and basic definitions]]    |
   | Application | [[https://youtu.be/718uGYbUmao][MooCall Calving Sensor App]] (IoT network) |
   | Practice    | Install GNU Emacs (ESS or vanilla) ([[https://github.com/birkenkrahe/org/blob/master/FAQ.org#how-to-install-emacs-ess-under-windows-and-macos][FAQ]]) |
   | Demo        | [[https://www.gnu.org/software/emacs/tour/][Emacs guided tour]]                        |
   | Self        | [[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][Work through the Emacs onboard tutorial]]  |

** Objectives

   * [X] Review the basics of Git and GitHub

   * [X] Know basic definitions of database management systems

   * [X] See a current example of an IoT-based DB application

   * [X] Install the GNU Emacs editor on your OS

   * [ ] Understand how GNU Emacs works

   * [ ] Make GNU Emacs work for you

* DB elements, GNU Emacs - w2s3 - January 18, 2022
** Overview

   | HOW         | WHAT                                     |
   |-------------+------------------------------------------|
   | Review      | [[https://lyon.schoology.com/assignment/5563835679][Quiz 1: Intro to course / databases]]      |
   | Lecture     | Elements of Database Systems             |
   | Demo        | [[https://www.gnu.org/software/emacs/tour/][Emacs guided tour]]                        |
   | Self        | [[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][Work through the Emacs onboard tutorial]]  |

** Objectives

   * [X] Review last week's content with a quiz

   * [X] Review file vs. db approach to data management

   * [X] Learn about the elements of a database system

   * [X] Understand DB system design structure/users

   * [X] Understand how GNU Emacs works (guided tour)

   * [ ] Make GNU Emacs work for you

** What's next?

   * Take a look at the Emacs tutorial (CTRL-h t)
   * GNU Emacs practice exercises (in class)
   * DataCamp assignments beginning next week (online)

* SQLite installation - w2s4 - January 20, 2022
** Overview

   | HOW      | WHAT                                    |
   |----------+-----------------------------------------|
   | Demo     | Installing ~sqlite~[fn:1] (done[fn:2])              |
   | Practice |Emacs guided tour ([[https://www.gnu.org/software/emacs/tour/][tour]])([[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][web-tutorial]])   |
   | Self     | [[https://www.stolaf.edu/people/humke/UNIX/emacs-tutorial.html][Work through the Emacs onboard tutorial]] |

** Objectives

   * [X] Understand how GNU Emacs works (guided tour)

   * [X] Make GNU Emacs work for you (tutorial)

** What's next?

   * Architecture and classification of databases
   * DataCamp assignments due next week (online)
   * Cloud computing - relevance for databases


   Cloud Computing for Everyone
   Cloud Computing for Everyone
   Introduction to Cloud Computing
   I forgot to mention this in the last class. This is the first DataCamp assignment. It is informational and very simple - nothing but drag and drop practice and a few videos. This should not take you longer than 15-20 minutes.

   We'll pick up on past assignments in class - short review including questions for the audience (you!)
   Completing this assignment on time gets you 10 points (100%).
   Late completion (after the due date): 5 points (50%).
* Cloud computing intro - w3s5 - January 25, 2022
** Overview

   | HOW        | WHAT                                         |
   |------------+----------------------------------------------|
   | Review     | Quiz 2 - database foundations / Emacs        |
   |            | DataCamp assignment 1: cloud computing intro |
   | Quiz (opt) | [[https://h5p.org/node/84879][Inside Google's Data Center]] (Thu)            |
   |------------+----------------------------------------------|
   | Demo       | Emacs Org-/ code blocks                      |
   | Practice   | Create literate Org-mode file                |
   |            | Run ~sqlite~ program in Emacs                |
   | Assignment | Do this on your PC (extra credit by Thu 1PM) |

** Objectives

   * [X] Review db foundation and GNU Emacs (quiz 2)

   * [X] Review introduction to cloud computing (DataCamp 1)

   * [X] Understand GNU Emacs Org-mode

   * [X] Know how to create a literate Org-mode file

   * [X] Know how to run a literate Org-mode file

** DataCamp assignment: Cloud Computing Introduction

   * What's the main message of this lesson?
   * What does cloud computing have to do with databases?
   * What did you think about the assignment?
   * What did I think about the assignment? (see notes)

   #+caption: Schoology assignment, Jan 21, 2022
   #+attr_html: :width 600px
   [[./img/datacamp1.png]]

** What's next?

   * Architecture and classification of databases (book)
   * Next DataCamp assignment due Feb 1 ("Cloud deployment")
   * Org-file assignment (in Schoology) coming your way

* Cloud deployment - w4s6 - February 1, 2022
** Overview

   | HOW      | WHAT                                               |
   |----------+----------------------------------------------------|
   | Review   | Quiz 3 - data centers / cloud computing / metadata |
   |          | DataCamp assignment 2: cloud deployment            |
   |          | Emacs Org-mode assignment (see tutorial videos)    |
   |----------+----------------------------------------------------|
   | Lecture  | Database foundations - 10 tenets                   |
   |----------+----------------------------------------------------|
   | Practice | SQLite basics - creating/importing a database      |

** Objectives

   * [X] Review quiz 3 - how should you study, learn and rehearse?

   * [X] Review deployment of cloud computing services (DataCamp 2)

   * [X] Review database foundations (10 tenets)

   * [X] Opened, closed SQLite (DBMS) and wrote on a db (see [[file:notes.org::Captain's Log Stardate 99687.04][notes]])

** DataCamp assignment: Cloud Deployment

   * What's the main message of this lesson?
   * What infrastructure is required? Can you do this yourself?
   * What're the greatest challenges of deployment?
   * What did I think about the assignment? ([[file:notes.org::DataCamp assignment - cloud deployment][notes]])

** Database management foundations - 10 tenets

   1) A database (DB) is a collection of related data items within
      a specific business process or problem setting.

   2) A database management system (DBMS) is the software package used
      to define, create, use and maintain a database.

   3) We distinguish the file-based vs. DB approach to data management
      (data from different application stored in different files
      vs. managed by one application and one shared, central database)

   4) Metadata are data (structure) definitions, like ownership or
      number of tables, and are stored in the DB catalog or
      dictionary.

   5) DBMS provide DB languages (like SQL) that facilitate data
      definition (DDL), data manipulation (DML), data querying (DQL),
      and data control (DCL).

   6) The database model (or schema) describes the DB data
      structure. It does not change easily, and is stored in the
      catalog. Examples are: entities stored (e.g. as tables), and
      entity aspects (e.g. as columns). To model, we use ERDs.

   8) The database state, or set of instances, represents the data in
      the DB at a given moment in time, viewed using the DB language
      (DQL). Examples are DB records (rows) from subsequent
      observations.

   9) DB follow a 3-layer design: an internal technical layer
      (e.g. server, file, network organisation), a conceptual/logical
      layer (e.g. the schema), and an external layer (views of the
      data provided e.g. by SQL queries).

   10) There are different types of DB users, with different skill
       sets: information (cloud) architects; DB designers (ERD); DB
       Administrators (SQL, Linux); Application Developers (e.g. Web
       App); Business Users (SQL).

** Practice: SQLite Basics

   We'll learn more about SQLite in future sessions. This is just to
   get our feet wet, including some important file system aspects.

   #+begin_example
   $ sqlite3
   sqlite> .database
   sqlite> .q
   $ touch test.db  # this only works if you have 'touch' installed, e.g.
                    # via the cygwin utility bundle
   $ fsutil file createNew test.db 0 # creates an empty file in ./
   $ sqlite3 test.db
   sqlite> .database
   sqlite> .q
   #+end_example

   As you can see, it's never easy to do anything in Windows. We're
   better off writing SQLite code in Emacs where the ~.db~ file is
   automatically created (see [[https://lyon.schoology.com/assignment/5603361550/info][assignment]]). If this doesn't work for
   you, contact me and we'll sort you out!

** What's next?

   * +Architecture and classification of databases (text book ch 2)+
   * Next DataCamp assignment due Feb 8 ("Cloud providers/cases")
   * New DataCamp assignment due Feb 15 ("Introduction to SQL: SELECT")
   * SQLite DDL practice

   <<<<<<< HEAD
* Cloud providers, SQLite introduction - w5s7 - February 8, 2022
** Overview

   | HOW       | WHAT                              |
   |-----------+-----------------------------------|
   | Review    | Cloud Providers and Case Studies  |
   |-----------+-----------------------------------|
   | Lecture   | Introduction to SQLite            |
   |-----------+-----------------------------------|
   | Practice  | Exploring ~sqlite3~               |
   |-----------+-----------------------------------|
   | Test info | Test 1 on Thu 10 Feb 1.30-2.15 pm |

** Objectives

   * [ ] Understand setup for test 1 (online in class)
   * [ ] Review DataCamp assignment
   * [ ] Understand what SQLite is and why it's important
** Test 1 info

   * Online in Schoology, Thu 10 January 1.30-2.15 pm
   * Quiz 1-3 are not visible during the test
   * The 10 hardest questions of quiz 1-3 (< 50%)
   * 10 brand new questions
   * Maximum time = 45 min

** DataCamp assignment: Cloud Providers and Case Studies

   * What's the main message of this lesson?
   * How does one pick a cloud provider?
   * What did I think about the assignment?

** Introduction to SQLite

   #+caption: Introduction to SQLite (mindmap)
   #+attr_html: :width 600px
   [[./img/sqlite.png]]

** IN PROGRESS Practice: SQLite Basics (cont'd)
   DEADLINE: <2022-02-10 Thu>

   * We last looked at entering SQLite ([[file:notes.org::Captain's Log Stardate 99687.04][notes]])

   * Today, we look at a few more commands:
     #+begin_example
     $ sqlite3 sqlite.db  # starts SQLite on the Command shell
     $ sqlite3 -help      # options list
     sqlite> .databases   # prints current persistent database
     sqlite> .show        # display and I/O options
     sqlite> .tables      # check for tables
     #+end_example

** What's next?

   * Test 1 - Thursday 1.30-2.15
   * New DataCamp assignment due Feb 15 ("Intro to RDBM with SQL")
   * SQLite DDL practice

* SQLite lab session, test 1 - w5s8 - February 10, 2022
** Overview

   | HOW                 | WHAT                             |
   |---------------------+----------------------------------|
   | Interactive Lecture | Introduction to SQLite 2         |
   |---------------------+----------------------------------|
   | Test 1              | Thu 10 Feb 1.30-2.15 pm (online) |

** Objectives

   * [ ] More SQLite command line practice

     * SQLite lab session

** SQLite Lab session

   You should type the commands shown here into your own SQLite shell
   to get some practice -

   * To open SQLite under Windows, open a CMD shell and type
     ~sqlite3~. If this does not work, you either have not installed
     the program, or you don't have the location of the executable
     ~sqlite3.exe~ in the ~$PATH~ of your PC.

   * To find the ~$PATH~ to the executable, open an ~*eshell*~ in Emacs
     (~M-x eshell~) and type ~which sqlite3~ (that's a Linux shell command,
     and Emacs simulates Linux shell commands using Emacs Lisp).

   * Inside SQLite, on the SQLite shell (indicated by the prompt
     ~sqlite>~), you need to operate with a persistent database file
     that must have the ending ~*.db~.

   * The output to the code in [[check_db]] shows 1) we have a persistent
     database that we're currently writing to, 2) where the file is, 3)
     we have no tables (yet).
     #+name: check_db
     #+begin_src sqlite :db sqlite.db :results output :exports both
       .database
       .tables
     #+end_src

     #+RESULTS:
     : main: c:\Users\birkenkrahe\Documents\GitHub\db330\sqlite.db r/w
     : 1,"Jimmy Jones"
     : 2,"Jane Jackson"

   * To create a table, we need SQL commands (not just SQLite shell
     commands). In [[create]], the SQL keywords are all capitalized though
     SQLite doesn't actually care about that.
     #+name: create
     #+begin_src sqlite :db sqlite.db :results silent :exports both
       CREATE TABLE customer (id INT, name TEXT);
     #+end_src
     - ~customer~ is the name of our table
     - ~id~ and ~name~ are the two columns of our table (stuff we wish
       to store)
     - ~INT~ and ~TEXT~ are two SQLite data types

   * ~CREATE TABLE~ is a DDL (Data Definition Language) command. We
     now have a table but no content.
     #+name: .tables
     #+begin_src sqlite :db sqlite.db :exports both
       .tables
     #+end_src

     #+RESULTS: .tables
     : customer

   * ~INSERT INTO~ is a DML (Data Manipulation Language) command. We
     insert two lines. The result is silent.
     #+name: insert
     #+begin_src sqlite :db sqlite.db :results silent :exports both
       INSERT INTO customer VALUES (1,"Jimmy Jones");
       INSERT INTO customer VALUES (2,"Jane Jackson");
     #+end_src

   * To look at what we've entered, we use the ~SELECT~ command, a DQL
     (Data Query Language) command.
     #+name: select
     #+begin_src sqlite :db sqlite.db :exports both
       SELECT * FROM customer;
     #+end_src
     - This command is best understood as a data pipeline (more later)
     - Its general form is ~SELECT [cols] FROM [table] [filter]~
     - The wildcard symbol ~*~ means "all columns" of the table

     #+RESULTS: select
     | 1 | Jimmy Jones  |
     | 2 | Jane Jackson |

** What's next?

   * New DataCamp assignment due Feb 15 ("Intro to RDBM with SQL")
   * SQLite DDL/DML/DQL practice continued

* Review test 1, introduction to SELECT - w6s9 - February 15, 2022
** News

   * Matthew Stewart, Stone Ward (Fri 18 Feb 3-3.50 PM) via Google Meet

** Objectives

   * [ ] Understand test results
   * [ ] Know what to do different next time
   * [ ] Discuss selected questions and answers
   * [ ] Understand how "in class assignments" work
   * [ ] Review DataCamp lesson "Selecting columns"
   * [ ] Get an introduction to SELECT

** Test review
*** Test 1 results

    * I think the results are actually very decent - > 75%% is a
      good result - better next time!
      #+caption: Test 1 results (Schoology)
      #+attr_html: :width 500px
      [[./img/test_1_stats.png]]

    * What surprised me most was that many of you did not use the
      available time. Alas, the stats don't show this number. A quick
      glance does not seem to reveal any clear pattern[fn:7].

    * I am an obsessive fact-checker. When checking the stats with R, I
      find slightly different results:
      #+name: test 1 results
      #+begin_src R :exports both :session :results output
        results <- c(17.88,15.8,16.67,12.32,9.54,16.56,12.31,12.78,14.33,
                     18.67,18,17.56,12.64,15.56,15.86,14.64,13.96,14.75,16.43,
                     15.58,16.44,13.98,18.56,14.91,13.11,17,16.33,17.21)
        length(results)
        sd(results)
        summary(results)
      #+end_src

      #+RESULTS: test 1 results
      :
      : [1] 28
      :
      : [1] 2.193788
      :
      :    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
      :    9.54   13.97   15.69   15.34   16.75   18.67

    * Let's make some plots: histogram, boxplot and density plot. I'd
      like the histogram and the density plot (a smoothened histogram)
      to peak more to the right, and for the boxplot to be smaller and
      higher up.
      #+name: histogram
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1hist.png
        hist(results, main="Histogram of test 1 results, CSC 330 Spring 2022")
      #+end_src

      #+RESULTS: histogram
      [[file:./img/test1hist.png]]

      #+name: boxplot
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1box.png
        boxplot(results, main="Test 1 results, CSC 330 Spring 2022")
      #+end_src

      #+RESULTS: boxplot
      [[file:./img/test1box.png]]

      #+name: density
      #+begin_src R :exports both :session :results output graphics file :file ./img/test1density.png
        ave <- mean(results)
        d <- density(results)
        plot(d, col="steelblue",main="Test 1 Results CSC 330 Spring 2022")
        abline(v=ave,col="red")
      #+end_src

      #+RESULTS: density
      [[file:./img/test1density.png]]

*** Analysis - feedback and action points

    * Test 1 can now be played an unlimited number of times. I have
      added feedback to all new questions.

    * What surprised me most was that many of you did not use the
      available time. However, I have not (yet) been able to correlate
      test time and test success.

    * See also: [[https://github.com/birkenkrahe/org/blob/master/diary.org#i-can-teach-it-to-you-but-i-cannot-learn-it-for-you]["I can teach it to you but I cannot learn it for you"]]

    * Questions:
      - How did you study for this test?
      - If you didn't perform well, what will you change?
      - What can I do to help you help yourself?

    * Changes to be applied in future quizzes/tests:
      - Fewer multiple choices (max. 4)
      - Announce if a question has > 1 answer (and/or how many)

    #+caption: Feynman (via Twitter)
    #+attr_html: :width 500px
    [[./img/feynman.png]]

*** Individual questions

    Some questions do not accept a feedback option. I have put a GitHub
    link into the question field.

    * See [[https://github.com/birkenkrahe/db330/blob/main/FAQ.org#control-question-test-1-on-cloud-services][the FAQ]] for a question on the problem of "decreasing control"
      for different cloud computing architectures. Some of you will get
      points for giving the correct order, irrespective of the
      direction - because indeed there was a conflict with the DataCamp
      image showing that "control" decreases from IaaS to SaaS, and not
      the other way around - because this was with regard to loss of
      control from complexity, for both provider and customer, while I
      was asking about the customer specifically. Complexity/abstraction
      is an important parameter in system design but less relevant for
      the customer, more relevant for the provider[fn:6].

**** Customer control for different cloud architectures (Ø=0.46)

     [[https://github.com/birkenkrahe/db330/blob/main/FAQ.org#control-question-test-1-on-cloud-services][See FAQ]] - student question and answer.

**** How does MooCall sensor operate? (Ø=0.96)

     Bring the following processes in the right order.

     1) Edge computing: data are generated and pre-processed locally
     2) Cloud computing: data are processed globally to generate a signal
     3) Local computing: signal is transmitted to the user

     Feedback: The sensor is attached to the cow's tail. It records
     data as signals in the form of temperature, motion, etc. In
     relation to the cloud, the sensor (a microcontroller with minimal
     operating and processing capabilities) operators "on the edge" (of
     the cloud). It has likely an SQLite database on board, or perhaps
     something even simpler. Gathering the data and writing them to a
     file if only for transport to the cloud is the "preprocessing". In
     the next step, the signal for the end user is prepared once the
     data (from different cows, and over a longer period of time) are
     now "in the cloud". In practice this means that they are now in a
     database on a server, very likely in tabular form. The processing
     in the cloud generates a signal for the end user when the evidence
     is conclusive, and when the software used to process the data has
     reached a positive prediction: "Cow is ready to calve". Only then
     the end user, the farmer, will be notified. In another scenario,
     the farmer is continuously informed about the state of the
     cow. But this does not change anything in the data processing
     pipeline.

**** Database architecture layer and example applications (Ø=88)

     This question goes back to a slide from the DB foundation
     presentation ([[pdbm][Lemahieu et al, 2021]]).

     * The *external layer* is what the end-user sees - e.g. a manager
       looking at a dashboard, or using SQL to formulate a database
       query. The image shows entities and their attributes.

     * The *conceptual/logical layer* is the database schema that
       translates the user requirements - stored entities and their
       attributes - into a database schema. The "logical" part relates
       to the fact that this schema needs to fulfil certain conditions
       to be usable by the RDBMS - e.g. records need to be uniquely
       identifiable.

     * The *internal layer* refers to the physical implementation,
       e.g. the server infrastructure used to split up, or duplicate,
       databases over an international network.

     #+caption: Three-layer DBMS architecture (Lemahieu et al, 2021)
     #+name: schema
     #+attr_html: :width 500px
     [[./img/layers.png]]

**** Pros and Cons of SQLite (Ø=88)

     | PROS                    | CONS                              |
     |-------------------------+-----------------------------------|
     | Very lightweight        | No concurrency                    |
     | Zero configuration      | No user management                |
     | No library dependendies | Security - no data access control |
     | Highly portable         | Limited data types                |

     * See [[https://github.com/birkenkrahe/db330/blob/main/sqlite/introduction_to_sqlite.png][Introduction to SQLite (mindmap)]]. This mindmap does not give
       an explanation (or even a source) of these properties, just a
       listing. For details, see e.g. [[https://www.keycdn.com/support/sqlite-vs-mysql][keycdn]] ([[keycdn][2018]]).

**** Use case diagrams and UML (Ø=0.71)

     * UML is Unified Modeling Language - an important modeling
       framework for information systems design - from the small
       (database system) to the large (e.g. all systems of an
       airport). Use case diagrams are one of the 14 (standard) diagram
       categories of this language - and probably the easiest at that.

     * Here is a short [[https://youtu.be/zid-MVo7M-E][introductory video]] on Use Case diagrams only.

**** In research communication, "limitations" means "bias" (Ø=0.54)

     In the first video of the last DataCamp chapter on cloud computing
     for everyone, the presenter initially spends a lot of time trying
     to explain potential bias - e.g. because of the (commercial)
     sources of information. This bias effectively limits the validity
     of the presentation - high bias means that we cannot simply believe
     what we're told. Scientific publications must have a section on
     "limitations" of the research that is mainly about bias of method,
     and bias of the researcher.

**** What are "Meta Data"? (Ø=0.89)

     Meta (from Greek, "with", or "alongside") Data come with the data,
     and they are always data about data - in the case of databases,
     e.g. about the ownership of the database. Definitions, and queries
     belong to DDL, and DQL, respectively. Data design issues include
     both of these.

     An example outside of databases are the control codes for Emacs
     Org-mode files beginning with the characters ~#+~. They contain
     layout information (e.g. ~#+OPTIONS: toc:nil~) or information
     about title or authorship.

**** Database virtualization (Ø=0.61)

     Virtualization is an important principle of system abstraction:
     one abstracts from (= eliminates) the notion of physical
     location. The database appears to be in one place (at the external
     level) but at the internal level, it is distributed. The user
     never knows this.

     The same concept applies to operating systems whose
     processes are virtualized in the sense that jobs are executed by a
     concerted action of CPU, volatile memory (RAM) and non-volatile
     memory (e.g. Hard disk), while the user knows nothing about it.

**** Entering sqlite3 at the prompt opens SQLite to a transient database (Ø=0.54)
**** Which database language properties does SQLite have? (Ø=0.64)

     DDL, DML, DQL
     
** How do class assignments work?

   * In-class assignments are *10%* of your total grade
   * They are labeled *class assignments* in the Schoology gradebook
   * You get the points if you attend and participate *actively*
   * If you check your phone instead, you're *not* active
   * If you could not attend (with a good excuse), submit *late*

** Review of DataCamp (interactive)

   * Review dashboard: SQL shell / table view

   * ~AS~ is an alias operator: it is used in [[as]] as an alias for the
     column name.
     #+name: AS
     #+begin_src sqlite :db sqlite.db
     .header ON
     .mode column
     SELECT name AS result FROM customer;
     #+end_src

     #+RESULTS:
     | result       |
     | ------------ |
     | Jimmy Jones  |
     | Jane Jackson |

   * The ~AS~ in DataCamp created a column. You can use ~SELECT~ to
     "pipe" anything into a table format.
     #+name: AS1
     #+begin_src sqlite :db select.db
      .header ON
      .mode column
      SELECT 'Hello world' AS hello;
     #+end_src

     #+RESULTS: as1
     | hello       |
     | ----------- |
     | Hello world |

   * Demonstration of ~DISTINCT~ using our table ~customer~.
     #+name: DISTINCT
     #+begin_src sqlite :db sqlite.db
       .header ON
       .mode column
       INSERT INTO customer VALUES (3,"Jimmy Jones");
       SELECT * FROM customer;
       SELECT DISTINCT name AS dist_name FROM customer;
       DELETE FROM customer WHERE id=3;
     #+end_src

     #+RESULTS: DISTINCT
     | id  name         |
     | --  ------------ |
     | 1   Jimmy Jones  |
     | 2   Jane Jackson |
     | 3   Jimmy Jones  |
     | dist_name        |
     | ------------     |
     | Jimmy Jones      |
     | Jane Jackson     |

   * Demonstration of ~COUNT~ using our table ~customer~.
     #+name: COUNT
     #+begin_src sqlite :db sqlite.db :results output
       SELECT COUNT(*) FROM customer;
       INSERT INTO customer VALUES (3,"Arabela Ant");
       SELECT COUNT(*) FROM customer;
     #+end_src

     #+RESULTS: COUNT
     : 2
     : 3

*** GLOSSARY

     | TERM       | EXPLANATION                                               |
     |------------+-----------------------------------------------------------|
     | SQL        | Structured Query Language                                 |
     | table      | Rectangular data structure, set of rows and columns[fn:3] |
     | record     | Row for set of observations on one entity                 |
     | field      | Column for attribute of all rows in that table            |
     | ~AS~       | SQL alias operator                                        |
     | ~DISTINCT~ | Selector of unique values from one column                 |
     | ~COUNT~    | SQL aggregator function                                   |

** Overview of ~SELECT~

   * Overview of the SELECT pipeline (mindmap)

** Next

   * More SQLite gymnastics: ~stdout~, ~.dump~
   * DataCamp: filtering results
   
* References
  * <<pdbm>> Lemahieu et al (2021). Principles of Database Management. Univ of
    Cambridge Press. [[https://www.pdbmbook.com/][URL: pdbmbook.com]].
  * TutorialCup (n.d.) System Catalog [website]. [[https://www.tutorialcup.com/dbms/system-catalog.htm][URL:
    www.tutorialcup.com.]]
* Footnotes

[fn:3]It is not true that a "table is like a
spreadsheet". Spreadsheets contain active fields for
computation. Org-mode tables are actually spreadsheet-enabled:
     #+begin_example
     |         2 |
     |         5 |
     |         7 |
     |-----------|
     | 4.6666667 |
     #+TBLFM: @5$1=vmean(@1..@4)
     #+end_example


[fn:2]In Lyon 104 (Computer lab), the ~PATH~ variable is unfortunately
stored in the personal user's app data so that I could not set it
properly for your account (you can do this on your own PC
easily). However, [[file:FAQ.org][I seem to have found a solution]] for this ([[https://github.com/birkenkrahe/db330/blob/main/FAQ.org#how-to-run-sqlite-in-emacs][see course
FAQ]]).

[fn:1]For installation on your PC, see [[https://github.com/birkenkrahe/org/blob/master/emacs/install.org][these instructions]] ([[https://github.com/birkenkrahe/org/blob/master/emacs/install.pdf][PDF]]). The
installation is simple: download the ZIP file, unpack it, and set the
~PATH~ variable so that sqlite can be found.
