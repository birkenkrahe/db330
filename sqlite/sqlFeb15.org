#+STARTUP: hideblocks overview
The material from 15 Feb begins [[below]]. The first two sections are
stuff we did prior.

* ~CREATE TABLE~

  For the code chunk below to work, you need to have created a table
  ~customer~.
  #+name: create table
  #+begin_src sqlite :db sqlite.db
    CREATE TABLE customer (id INT, name TEXT);
    .tables
  #+end_src

* ~INSERT INTO~ table

  If running this chunk results in the message that the table already
  exists, but you don't get any output, then you need to add at least one line:
  #+name: insert row
  #+begin_src sqlite :db sqlite.db
    INSERT INTO customer VALUES (1,"Bob Bauman");
    SELECT * FROM customer;
  #+end_src

* ~AS~ operator
  <<below>>

  * This operator creates aliases for names in SQL
    #+name: AS
    #+begin_src sqlite :db sqlite.db
      .header ON
      .mode column
      SELECT name AS nome FROM customer;
    #+end_src

* Hello world program

  * ~SELECT~ pipes any content into a table - e.g. let us write a
    "hello world" program (with a long German column name meaning
    'bias'):
    #+name: hello world
    #+begin_src sqlite :db select.db
      .header ON
      .mode column
      SELECT 'hello world' AS Voreingenommenheit;
    #+end_src

* Arithmetic with ~SELECT~
  * ~SELECT~ can do arithmetic, too!
    #+name: arithmetic
    #+begin_src sqlite :db select.db
      SELECT 1*3*4;
    #+end_src

* ~DISTINCT~ demo
  * Demo of ~DISTINCT~ using ~customer~
    #+name: DISTINCT
    #+begin_src sqlite :db sqlite.db
      .header ON
      .mode column
      .tables
      SELECT * FROM customer;
      INSERT INTO customer VALUES (4, "Peter Piper");
      SELECT * FROM customer;
    #+end_src

    #+begin_src sqlite :db sqlite.db
      .header ON
      .mode column
      SELECT * FROM customer;
      SELECT DISTINCT * FROM customer;
    #+end_src

  #+begin_src sqlite :db sqlite.db
    CREATE TABLE customer1 (id INT, name TEXT);
    .tables
  #+end_src
